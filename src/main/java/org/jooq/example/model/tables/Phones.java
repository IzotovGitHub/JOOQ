/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.model.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.example.model.Keys;
import org.jooq.example.model.Public;
import org.jooq.example.model.tables.records.PhonesRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Phones extends TableImpl<PhonesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.phones</code>
     */
    public static final Phones PHONES = new Phones();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhonesRecord> getRecordType() {
        return PhonesRecord.class;
    }

    /**
     * The column <code>public.phones.id</code>.
     */
    public final TableField<PhonesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.phones.number</code>.
     */
    public final TableField<PhonesRecord, String> NUMBER = createField(DSL.name("number"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.phones.client_id</code>.
     */
    public final TableField<PhonesRecord, Long> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.BIGINT, this, "");

    private Phones(Name alias, Table<PhonesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Phones(Name alias, Table<PhonesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.phones</code> table reference
     */
    public Phones(String alias) {
        this(DSL.name(alias), PHONES);
    }

    /**
     * Create an aliased <code>public.phones</code> table reference
     */
    public Phones(Name alias) {
        this(alias, PHONES);
    }

    /**
     * Create a <code>public.phones</code> table reference
     */
    public Phones() {
        this(DSL.name("phones"), null);
    }

    public <O extends Record> Phones(Table<O> child, ForeignKey<O, PhonesRecord> key) {
        super(child, key, PHONES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PhonesRecord, Long> getIdentity() {
        return (Identity<PhonesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PhonesRecord> getPrimaryKey() {
        return Keys.PHONES_PKEY;
    }

    @Override
    public List<ForeignKey<PhonesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PHONES__PHONES_CLIENT_ID_FKEY);
    }

    private transient Clients _clients;

    /**
     * Get the implicit join path to the <code>public.clients</code> table.
     */
    public Clients clients() {
        if (_clients == null)
            _clients = new Clients(this, Keys.PHONES__PHONES_CLIENT_ID_FKEY);

        return _clients;
    }

    @Override
    public Phones as(String alias) {
        return new Phones(DSL.name(alias), this);
    }

    @Override
    public Phones as(Name alias) {
        return new Phones(alias, this);
    }

    @Override
    public Phones as(Table<?> alias) {
        return new Phones(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Phones rename(String name) {
        return new Phones(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Phones rename(Name name) {
        return new Phones(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Phones rename(Table<?> name) {
        return new Phones(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
