/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.model.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.example.model.tables.Clients;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientsRecord extends UpdatableRecordImpl<ClientsRecord> implements Record3<Long, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.clients.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.clients.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.clients.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.clients.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.clients.address_id</code>.
     */
    public void setAddressId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.clients.address_id</code>.
     */
    public Long getAddressId() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Clients.CLIENTS.ID;
    }

    @Override
    public Field<String> field2() {
        return Clients.CLIENTS.NAME;
    }

    @Override
    public Field<Long> field3() {
        return Clients.CLIENTS.ADDRESS_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Long component3() {
        return getAddressId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Long value3() {
        return getAddressId();
    }

    @Override
    public ClientsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ClientsRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ClientsRecord value3(Long value) {
        setAddressId(value);
        return this;
    }

    @Override
    public ClientsRecord values(Long value1, String value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ClientsRecord
     */
    public ClientsRecord() {
        super(Clients.CLIENTS);
    }

    /**
     * Create a detached, initialised ClientsRecord
     */
    public ClientsRecord(Long id, String name, Long addressId) {
        super(Clients.CLIENTS);

        setId(id);
        setName(name);
        setAddressId(addressId);
        resetChangedOnNotNull();
    }
}
